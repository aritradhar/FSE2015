%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ArrayIndex.pdf
%%Creator: Adobe Acrobat 10.1.12
%%For: Aritra
%%CreationDate: 03-Nov-14, 1:27:00 AM
%%BoundingBox: 0 0 803 484
%%HiResBoundingBox: 0 0 802.6681 483.2569
%%CropBox: 0 0 802.6681 483.2569
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1091 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-06-15T13:18:11+05:30"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2014-06-24T03:06:07+05:30"
   xmp:MetadataDate="2014-06-24T03:06:07+05:30"
   pdf:Producer="Microsoft® PowerPoint® 2013"
   xmpMM:DocumentID="uuid:83793b6a-52a0-4d7f-94f1-99c5e1fd337e"
   xmpMM:InstanceID="uuid:d4e5f214-cb8f-45e2-8024-5e27004f8928">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Aritra Dhar</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint Presentation</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -483.257 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 483.257 li
802.668 483.257 li
802.668 0 li
cp
clp
gsave
-.875 484.072 mo
803.125 484.072 li
803.125 -.927979 li
-.875 -.927979 li
cp
clp
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
2.905 155.852 mo
2.905 126.822 42.715 103.292 91.825 103.292 cv
140.935 103.292 180.745 126.822 180.745 155.852 cv
180.745 184.882 140.935 208.412 91.825 208.412 cv
42.715 208.412 2.905 184.882 2.905 155.852 cv
cp
ef
2.28 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
2.905 155.852 mo
2.905 126.822 42.715 103.292 91.825 103.292 cv
140.935 103.292 180.745 126.822 180.745 155.852 cv
180.745 184.882 140.935 208.412 91.825 208.412 cv
42.715 208.412 2.905 184.882 2.905 155.852 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Consolas Initial
ct_T42Dict begin
-0.43 -0.301 0.676 1.008
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Consolas
Type42DictBegin
[<00010000000c000c000c000c4f532f324957f75c000000cc000000606376
7420e245c84c0000012c000005126670676d01980ece0000064000000917
676c796698674f30000072800000134e68656164ea4527e100000f580000
003668686561094807cf00000f9000000024686d7478912616fd00000fb4
000023aa6c6f636186a48c9a00003360000015606d617870173b18b50000
48c0000000206e616d65d5bc6487000048e00000114f70726570bd99a16d
00005a300000184e67646972000000000000000000000000000304660190
00050008059a05330000011f059a0533000003d1006602000809020b0609
020204030204e10002ff4000fcff00000009000000004d53202000400000
1d9c05f1fdf1015e075c02026000019fdfd7000003ec051b000000200003
0000076c0337fe5c0000000000000000000000000000005200660073008a
009600a600d501080133014d0073008500a000ae00c100ca00f00106011d
014c00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000051b00120000ffeefe7ffffbff2905f2fee5fe5c
0617ff0605d7ff1403ec00120000ffee0585000cfe66fff6fe7ffed9ff29
04c3fe5cff000666ff29fff002400008051b00120000ffee047b0012ff29
fff80566058505a805d10337fe2900000000079e00000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000004d0052005f00650066006a0066006c0070006a
005c005d005e00640069007000710073007400760079007a007b007d006e
0077007b007e0082008300860088006e007300770079007a007b007f0081
008300870089008b008c008d008e008f00810082008500870088008b008d
008e008f0089008d008f007f0081008200830085008600870089008a008b
008c008d008e008f00910093009600980099009a009b0090009100920093
009400950096009700980099009a009b009c009d00910093009400950096
009700980099009a009c0090009100920093009400950096009700980099
009a009b009c009d009e009f00a000a100a200a400a600a800aa00ae009e
009f00a000a200a400a600a800aa00ab00ac00af00b1009e00a200a600a8
00ae00d500d500e100fe00fb00fc00ef00f10108010a0112011a0133013d
014d014e0065006800730074005c005e006e0075006f0076007300900091
007f00800085008a008b007d00870088007f008600880089008b00900091
00920081008400850086008700880089008a008c008d008e008f00910092
009400950098009e00a400a600930099009c009d00a000a100a200a300a4
00a600940095009600980099009a009b009c009d009e009f00a000a300a4
00a500a6009400950096009700980099009a009b009c009d009e009f00a0
00a200a300a400a500a600a900ab00b000b200b300b400b600b700ac00ae
00af00b200b400b500ac00a700a800a900aa00ab00ac00ad00ae00b000b1
00b200b300b400b500b600b700a800aa00ab00ac00ad00ae00af00b000b1
00b200b300b400b500b600b700b800ba00bb00bc00bd00c100b800b900bc
00b800b900ba00bb00bc00bd00be00c400b800b900ba00bc00bd00be00c1
00c300c400c500c600c700cc00cd00d500d700c700c800cb00d100d200d3
00d500d700d900e200ee00fa00df00e700ef00dd00e100e500e600e800eb
00ec00ee00ef00f000f100f600fc00fc00fe00fc01060108010a012d0112
0119011d012501330139014c000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0096000000000000000000000000000000000000026201cc02f8fdfe075c
000000000000000005850593033d024c0000fff0005c005c008efe600000
000c0630060b05fa05ef000b0535000a051b02cefff601d306e400090614
0415fff60057006200004047645f5e5d5c5b5a59585554535251504f4e4d
4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d2c2826
252423221f181411100f0d0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b0042651582320b00d44235921212d2c20204518684420b0016020
45b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b
2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045
b00325456164b050515845441b2121592d2c2045b0004360442d2c01b006
43b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d
2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0052510
23208af500b0016023edec2d2c01b005251023208af500b0016123edec2d
2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001610110
203c003c2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2c4523456023456023456023766818b08062202d2cb00426b004
26b00425b0042545234520b003266062636820b0032661658a2344442d2c
2045b0005458b040442045b04061441b2121592d2c45b1302f4523456160
b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b515820b003
2545695358441b2121591b2121592d2c45b01443b0006063b0016069442d
2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158b90033
ffe0b134201bb3330034005944442d2cb0164358b00326458a586466b01f
601b64b020606620581b21b04059b001615923586559b02923442310b029
e01b2121212121592d2cb0164358b004254564b020606620581b21b04059
b0016123586559b0292344b00425b00725082058021b0359b0052510b004
252046b0042523423cb0072510b006252046b00425b0016023423c205801
1b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0072508
2058021b0359b00425b003254348b00625b00325b0016043481b21592121
21212121212d2cb0164358b004254564b020606620581b21b04059b00161
23581b6559b0292344b00525b00825082058021b0359b0042510b0052520
46b0042523423cb00425b0072508b0072510b006252046b00425b0016023
423c2058011b0059b0042510b00525b029e0b02920456544b0072510b006
25b029e0b00525b00825082058021b0359b00525b003254348b00425b007
2508b00625b00325b0016043481b2159212121212121212d2c02b0042520
2046b004252342b0052508b003254548212121212d2c02b0032520b00425
08b0022543482121212d2c452320451820b00050205823652359236820b0
40505821b04059235865598a60442d2c4b53234b515a5820458a60441b21
21592d2c4b545820458a60441b2121592d2c4b53234b515a58381b212159
2d2c4b5458381b2121592d2cb002435458b0462b1b21212121592d2cb002
435458b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb0
02435458b0492b1b212121592d2c208a08234b538a4b515a5823381b2121
592d2c0020b200400325b0062649618b3812342d2c014623466023466123
201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a2353
583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042
b123018851b1400188535a58b910000020885458b202010243604259b124
01885158b920000040885458b2020202436042b12401885458b202200243
6042004b014b5258b2020802436042591bb940000080885458b202040243
604259b94000008063b80100885458b202080243604259b94000010063b8
0200885458b202100243604259b94000020063b80400885458b202400243
604259595959592d2c451868234b51582320452064b04050587c59688a60
59442d2cb00016b00225b0022501b001233e00b002233eb10102060cb00a
236542b00b234201b001233f00b002233fb10102060cb006236542b00723
42b00116012d2c20b82000628a6023622d2cb0072558001b0159b0042510
b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58b0092b
5920b005254ab0042547b004254760b0062547b0806361b00225b0005558
b00325b00725496359b0082558001b0159b00425b0062549b009255cb009
255a58b0092b59b0072546b0806361b0032520b0005558631b2159612320
b0005558b080631b21b08059b0592bb006255c586959b00425202010b000
48233ab0062658001b0159b0052658b003252f598a12233221212d2cb006
25b00a2587b00625b009254ab0005358b00625b00a251bb00925b0072559
b00225b00225070cb005256323b00625636020b94000040063535821b004
26b00426b00a1bb94000040063655158b0042665b0042665b00a1bb00426
b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb0
0525b0052507595920b0005558b00525b0052587b00725b007250bb00925
10b00b25b0092620b8ffff545821cd1bed59b00525b0052507b00825b00b
254923b00625b0062587b00a2510b00b25c15920b00051b800522378b001
61b00225b00725b0072507b00a25b00d254961b08062b00525b005250bb0
0a252338b00625b0062587b00825b008250bb00a2510b00b25c4b00625b0
062507b00925b00c2549b0032554b8ffa723792121212121212121212121
212d2c23b0005458b9400000001bb900004000598ab0005458b940000000
1bb90000400059b05b2b2d2c08b0005458b9400000001bb900004000590d
b05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b05b2b2d
2cb00426b00426080db00426b00426080db05b2b2d2c204569442d000001
00000005547bf748405f5f0f3cf50009080000000000bbe31b2a00000000
cd4a6d93fc8bfd95056b08170000000800020000000000000001000005f1
fdf1015e0466fc8bfe51056b000100000000000000000000000000000726
046600580466000000000000046600000466000a00000000000000000000
0000046600c9000000000000000000000000000000000000000000000000
000000000466003100000000000000000000000000000000000000000466
006f00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000004660085000000000466009e0466006d
046600750000000000000000000000000000000000000000000000000000
000000000000000000000466005c0000000000000000046600c9046600b6
0466003f000000000000000000000000000000000466003b000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000466005e000000000000000000000000046600c90000
000000000000000000000466006200000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000466
01ac00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000004660102000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000046600f700000000
00000000000000000466016c000000000000000000000000000000000000
000000000000000000000466010d00000000000000000000000000000000
000000000466012d00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
04660114000000000000000000000000000000000466010e0466010e0000
000000000000000000000000000000000000000000000000000000000000
0466010300000000000000000000000000000000046600c5000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000004660127
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000466011000000000000000000000000000000000046600d500000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000007b007b007b007b00c800c800c800c8
00f900f900f900f900f900f900f900f901570157015701570157015701c3
01c301c301c301c301c301c301c301c301c301c301c301c301c301c301c3
01c301c301c301c301c301c301c301c301c301c301c301c301c301c301c3
01c301c301c301c301c301c301c301c301c301c301c301c301c301c301c3
01c301c301c301c301c301c301c301c301c301c301c301c301c301c301c3
01c301c301c301c301c301c301c301c301c301c301c301c301c301c301c3
01c301c301c301c301c301c301c301c301c301c301c301c301c301c301c3
01c301c301c301c301c301c301c301c301c301c301c301c301c301c301c3
01c301c301c3022c022c027602c503240324032403240324032403240324
0324032403700370037003ab04200462046204620462046204b604b604b6
04b604b604b604b604b604b604b604b604b604b604b604b604b604b604b6
04b604b604b604b604b604b604b604b604b604b604b604b604b604b604b6
04b604b604b604b604b604b604b604b604b604b604b604b604b604b604b6
04b604b604b604b604b604b604b604b604b604b604b604b604b604b604b6
04b604b604b604b604b604b604b604b604b604b604b604b604b604b604b6
04b604b604b604b604b604b604b604b604b604b604b604b604b604b604b6
04b604b604b604b604b604b604b604b604b604b604b604b604b604b604b6
04b604b604b604b604b604b604b604b604b604b604b604b604b604b604b6
04b604b604b604b604b604b604b604b604b604b604b604b604b604b604b6
04b604b604b604b604b604b604b604b604b6050205020502050205410541
0541054105af05af05af05af05af05af05af05af05af05af05af05af05af
05af05af05af05af05af05af05af05af05af05af05af05af05af05af05af
05af05af05af05af05af05af05af05af05af05af05af05af05af05af05e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
05e905e905e905e905e905e905e905e905e905e905e905e905e905e905e9
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
061206120612061206120612061206120612061206120612061206120612
06120612061206120612065a065a065a065a068e068e068e068e068e068e
068e068e06dd06dd06dd06dd06dd06dd074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b074b074b074b074b074b074b074b074b
074b074b074b074b074b074b074b07ad07ad07ad07ad07ad080408610861
086108610861086108610861086108a608a608a608a608a608e608e608e6
08e608e608e608e608e608e608e608e608e608e608e608e608e608e608e6
08e608e608e608e608e608e608e608e608e608e608e608e608e608e608e6
08e608e608e608e608e608e608e608e608e608e608e608e608e608e608e6
08e608e608e608e608e608e608e608e608e608e608e608e608e608e608e6
08e608e608e608e608e608e6092709270927092709270927092709270927
092709270927092709270927092709270927092709270927092709270927
092709270927092709270927092709270927092709270927092709270927
0962096209620962096209a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a709a709a709a7
09a709a709a709a709a709a709a709a709a709a709a709a7000100000aaf
003600040000000000020010002f006500000c12184e000000000000002d
022200000003000000000064000000000003000000010010006400000003
00000002000e05b60000000300000003002605c400000003000000040010
00640000000300000005001805ea00000003000000060010006400000003
00000007007806020000000300000008002a000e00000003000000090020
067a000000030000000a05520064000000030000000b0056069a00000003
0000000c002a06f0000000030000000d0298071a000000030000000e006c
09b2000100000000000000320a1e000100000000000100080a5000010000
0000000200070cf9000100000000000300130d0000010000000000040008
0a500001000000000005000c0d13000100000000000600080a5000010000
00000007003c0d1f000100000000000800150a2500010000000000090010
0d5b000100000000000a02a90a50000100000000000b002b0d6b00010000
0000000c00150d96000100000000000d014c0dab000100000000000e0036
0ef700030001040900000064000000030001040900010010006400030001
04090002000e05b60003000104090003002605c400030001040900040010
00640003000104090005001805ea00030001040900060010006400030001
04090007007806020003000104090008002a000e00030001040900090020
067a000300010409000a05520064000300010409000b0056069a00030001
0409000c002a06f0000300010409000d0298071a000300010409000e006c
09b200a9002000320030003100330020004d006900630072006f0073006f
0066007400200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e0043006f006e0073006f006c006100730020
00690073002000610069006d0065006400200066006f0072002000750073
006500200069006e002000700072006f006700720061006d006d0069006e
006700200065006e007600690072006f006e006d0065006e007400730020
0061006e00640020006f0074006800650072002000630069007200630075
006d007300740061006e0063006500730020007700680065007200650020
00610020006d006f006e006f00730070006100630065006400200066006f
006e00740020006900730020007300700065006300690066006900650064
002e00200041006c006c0020006300680061007200610063007400650072
0073002000680061007600650020007400680065002000730061006d0065
002000770069006400740068002c0020006c0069006b00650020006f006c
0064002000740079007000650077007200690074006500720073002c0020
006d0061006b0069006e00670020006900740020006100200067006f006f
0064002000630068006f00690063006500200066006f0072002000700065
00720073006f006e0061006c00200061006e006400200062007500730069
006e00650073007300200063006f00720072006500730070006f006e0064
0061006e00630065002e002000540068006500200069006d00700072006f
007600650064002000570069006e0064006f0077007300200066006f006e
007400200064006900730070006c0061007900200061006c006c006f0077
0065006400200061002000640065007300690067006e0020007700690074
0068002000700072006f0070006f007200740069006f006e007300200063
006c006f00730065007200200074006f0020006e006f0072006d0061006c
002000740065007800740020007400680061006e00200074007200610064
006900740069006f006e0061006c0020006d006f006e006f007300700061
00630065006400200066006f006e007400730020006c0069006b00650020
0043006f00750072006900650072002e0020005400680069007300200061
006c006c006f0077007300200066006f00720020006d006f007200650020
0063006f006d0066006f0072007400610062006c00790020007200650061
00640069006e00670020006f006600200065007800740065006e00640065
0064002000740065007800740020006f006e002000730063007200650065
006e002e0020004f00700065006e00540079007000650020006600650061
0074007500720065007300200069006e0063006c00750064006500200068
0061006e00670069006e00670020006f00720020006c0069006e0069006e
00670020006e0075006d006500720061006c0073003b00200073006c0061
0073006800650064002c00200064006f007400740065006400200061006e
00640020006e006f0072006d0061006c0020007a00650072006f0073003b
00200061006e006400200061006c007400650072006e0061007400690076
0065002000730068006100700065007300200066006f0072002000610020
006e0075006d0062006500720020006f00660020006c006f007700650072
00630061007300650020006c006500740074006500720073002e00200054
006800650020006c006f006f006b0020006f006600200074006500780074
002000630061006e002000620065002000740075006e0065006400200074
006f00200070006500720073006f006e0061006c00200074006100730074
0065002000620079002000760061007200790069006e0067002000740068
00650020006e0075006d0062006500720020006f00660020006200610072
007300200061006e0064002000770061007600650073002e005200650067
0075006c00610072004d006900630072006f0073006f00660074003a0020
0043006f006e0073006f006c0061007300560065007200730069006f006e
00200035002e003300330043006f006e0073006f006c0061007300200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000670072006f007500700020006f006600200063006f006d00700061
006e006900650073002e004c007500630028006100730029002000640065
002000470072006f006f00740068007400740070003a002f002f00770077
0077002e006d006900630072006f0073006f00660074002e0063006f006d
002f007400790070006f006700720061007000680079002f006300740066
006f006e007400730068007400740070003a002f002f0066006f006e0074
00660061006200720069006b002e0063006f006d0059006f00750020006d
0061007900200075007300650020007400680069007300200066006f006e
00740020006100730020007000650072006d006900740074006500640020
006200790020007400680065002000450055004c004100200066006f0072
0020007400680065002000700072006f006400750063007400200069006e
0020007700680069006300680020007400680069007300200066006f006e
007400200069007300200069006e0063006c007500640065006400200074
006f00200064006900730070006c0061007900200061006e006400200070
00720069006e007400200063006f006e00740065006e0074002e00200059
006f00750020006d006100790020006f006e006c00790020002800690029
00200065006d0062006500640020007400680069007300200066006f006e
007400200069006e00200063006f006e00740065006e0074002000610073
0020007000650072006d0069007400740065006400200062007900200074
0068006500200065006d00620065006400640069006e0067002000720065
0073007400720069006300740069006f006e007300200069006e0063006c
007500640065006400200069006e0020007400680069007300200066006f
006e0074003b00200061006e006400200028006900690029002000740065
006d0070006f0072006100720069006c007900200064006f0077006e006c
006f006100640020007400680069007300200066006f006e007400200074
006f002000610020007000720069006e0074006500720020006f00720020
006f00740068006500720020006f00750074007000750074002000640065
007600690063006500200074006f002000680065006c0070002000700072
0069006e007400200063006f006e00740065006e0074002e006800740074
0070003a002f002f007700770077002e006d006900630072006f0073006f
00660074002e0063006f006d002f007400790070006f0067007200610070
00680079002f0066006f006e00740073002f00640065006600610075006c
0074002e0061007300700078a92032303133204d6963726f736f66742043
6f72706f726174696f6e2e20416c6c205269676874732052657365727665
642e436f6e736f6c61732069732061696d656420666f722075736520696e
2070726f6772616d6d696e6720656e7669726f6e6d656e747320616e6420
6f746865722063697263756d7374616e6365732077686572652061206d6f
6e6f73706163656420666f6e74206973207370656369666965642e20416c
6c20636861726163746572732068617665207468652073616d6520776964
74682c206c696b65206f6c642074797065777269746572732c206d616b69
6e67206974206120676f6f642063686f69636520666f7220706572736f6e
616c20616e6420627573696e65737320636f72726573706f6e64616e6365
2e2054686520696d70726f7665642057696e646f777320666f6e74206469
73706c617920616c6c6f77656420612064657369676e2077697468207072
6f706f7274696f6e7320636c6f73657220746f206e6f726d616c20746578
74207468616e20747261646974696f6e616c206d6f6e6f73706163656420
666f6e7473206c696b6520436f75726965722e205468697320616c6c6f77
7320666f72206d6f726520636f6d666f727461626c792072656164696e67
206f6620657874656e6465642074657874206f6e2073637265656e2e204f
70656e5479706520666561747572657320696e636c7564652068616e6769
6e67206f72206c696e696e67206e756d6572616c733b20736c6173686564
2c20646f7474656420616e64206e6f726d616c207a65726f733b20616e64
20616c7465726e61746976652073686170657320666f722061206e756d62
6572206f66206c6f77657263617365206c6574746572732e20546865206c
6f6f6b206f6620746578742063616e2062652074756e656420746f207065
72736f6e616c2074617374652062792076617279696e6720746865206e75
6d626572206f66206261727320616e642077617665732e526567756c6172
4d6963726f736f66743a20436f6e736f6c617356657273696f6e20352e33
33436f6e736f6c617320697320612074726164656d61726b206f66207468
65204d6963726f736f66742067726f7570206f6620636f6d70616e696573
2e4c7563286173292064652047726f6f74687474703a2f2f7777772e6d69
63726f736f66742e636f6d2f7479706f6772617068792f6374666f6e7473
687474703a2f2f666f6e7466616272696b2e636f6d596f75206d61792075
7365207468697320666f6e74206173207065726d69747465642062792074
68652045554c4120666f72207468652070726f6475637420696e20776869
6368207468697320666f6e7420697320696e636c7564656420746f206469
73706c617920616e64207072696e7420636f6e74656e742e20596f75206d
6179206f6e6c792028692920656d626564207468697320666f6e7420696e
20636f6e74656e74206173207065726d6974746564206279207468652065
6d62656464696e67207265737472696374696f6e7320696e636c75646564
20696e207468697320666f6e743b20616e6420286969292074656d706f72
6172696c7920646f776e6c6f6164207468697320666f6e7420746f206120
7072696e746572206f72206f74686572206f757470757420646576696365
20746f2068656c70207072696e7420636f6e74656e742e687474703a2f2f
7777772e6d6963726f736f66742e636f6d2f7479706f6772617068792f66
6f6e74732f64656661756c742e6173707800b900200203b40918014a20b8
0202b40918014a20b80201b40918014a20b80200b40918014a20b801ffb4
0918014a20b801feb40918014a20b801fdb40918014a20b801fbb4091801
4a20b801fab40918014a20b801f9b40918014a20b801f8b40918014a20b8
01f7b40918014a20b801f6b40918014a20b801f5b40918014a20b801f4b4
0918014a20b801f3b40918014a20b801f2b40918014a20b801f1b4091801
4a20b801f0b40918014a20b801efb40918014a20b801eeb40918014a20b8
01edb40918014a20b801ecb40918014a20b801ebb40918014a20b801eab4
0918014a20b801e9b40918014a20b801e8b40918014a20b801e7b4091801
4a20b801e6b40918014a20b801e5b40918014a20b801e4b40918014a20b8
01e3b40918014a20b801e2b40918014a20b801e1b40918014a20b801e0b4
0918014a20b801dfb40918014a20b801deb40918014a20b801ddb4091801
4a20b801dcb40918014a20b801dbb40918014a20b801dab40918014a20b8
01d9b40918014a20b801d8b40918014a20b801d7b40918014a20b801d6b4
0918014a20b801d5b40918014a20b801d4b40918014a20b801d3b4091801
4a20b801d2b40918014a20b801d1b40918014a20b801d0b40918014a20b8
01cfb40918014a20b801ceb40918014a20b801cdb40918014a20b801ccb4
0918014a20b801cbb40918014a20b801cab40918014a20b801c9b4091801
4a20b801c8b40918014a20b801c7b40918014a20b801c6b40918014a20b8
01c5b40918014a20b801c4b40918014a20b801c3b40918014a20b801c2b4
0918014a20b801c1b40918014a20b801c0b40918014a20b801bfb4091801
4a20b801beb40918014a20b801bdb40918014a20b801bcb40918014a20b8
01bbb40918014a20b801bab40918014a20b801b9b40918014a20b801b8b4
0918014a20b801b7b40918014a20b801b6b40918014a20b801b5b4091801
4a20b801b4b40918014a20b801b3b40918014a20b801b2b40918014a20b8
01b1b40918014a20b801b0b40918014a20b801afb40918014a20b801adb4
0918014a20b801acb40918014a20b801abb40918014a20b801aab4091801
4a20b801a9b40918014a20b801a8b40918014a20b801a7b40918014a20b8
01a6b40918014a20b801a5b40918014a20b801a4b40918014a20b801a2b4
0918014a20b801a1b40918014a20b801a0b40918014a20b8019fb4091801
4a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a20b8
019ab40918014a20b80199b40918014a20b80198b40918014a20b80197b4
0918014a20b80196b40918014a20b80195b40918014a20b80194b4091801
4a20b80193b40918014a20b80192b40918014a20b80191b40918014a20b8
0190b40918014a20b8018fb40918014a20b8018eb40918014a20b8018db4
0918014a20b8018ab40918014a20b80189b40918014a20b80188b4091801
4a20b80187b40918014a20b80186b40918014a20b80185b40918014a20b8
0184b40918014a20b80183b40918014a20b80181b40918014a20b8017fb4
0918014a20b8017eb40918014a20b8017db40918014a20b8017cb4091801
4a20b8017bb40918014a20b80179b40918014a20b80178b40918014a20b8
0177b40918014a20b80176b40918014a20b80174b40918014a20b80173b4
0918014a20b80172b40918014a20b8016fb40918014a20b8016eb4091801
4a20b8016db40918014a20b8016cb40918014a20b8016bb40918014a20b8
016ab40918014a20b80169b40918014a20b80168b40918014a20b80167b4
0918014a20b80166b40918014a20b80165b40918014a20b80164b4091801
4a20b80163b40918014a20b80162b40918014a20b80161b40918014a20b8
0160b40918014a20b8015fb40918014a20b8015eb40918014a20b8015db4
0918014a20b8015cb40918014a20b8015bb40918014a20b80159b4091801
4a20b80158b40918014a20b80157b40918014a20b80156b40918014a20b8
0155b40918014a20b80154b40918014a20b80152b40918014a20b80151b4
0918014a20b80150b40918014a20b8014fb40918014a20b8014eb4091801
4a20b8014db40918014a20b8014ab40918014a20b80149b40918014a20b8
0146b40918014a20b80142b40918014a20b80141b40918014a20b80140b4
0918014a20b8013fb40918014a20b8013db40918014a20b8013bb4091801
4a20b80139b40918014a20b80138b40918014a20b80137b40918014a20b8
0136b40918014a20b80135b40918014a20b80134b40918014a20b80133b4
0918014a20b80132b40918014a20b80131b40918014a20b80130b4091801
4a20b8012fb40918014a20b8012eb30918014a4137028600640285005500
0002850001028300640284005500d002840001002f0284006f028400af02
84000300000282000100f002820001002f028200af0282000200af028100
0100700281000102800064027f00550050027f0080027f00020010027f00
40027f0070027f0003027db2644155b8027eb241ff1fb9027b027cb2641f
0f412c027c003f027c006f027c000300af027c00df027c00020010027c00
01005f027a00df027a0002005f027900df0279000200ef02780001009002
780001006f02780001001002780001027600640277005500100277002002
774075027201411f6f03411f6e02411f692d6855672d6655652d6455632d
6255613260552f603f60025f325e551f5abf5a02705ae05a02562d55553f
5501542d53553f5301c053019f53019f5301522d5155502d4f55704f012f
4f019f4801704801c048016f4801404801462d4555442d4355422d415540
b8026eb2090f46b9026c026bb2321f40b8026bb2090f46b9ffc00266b309
0c46d0bb0273000100400271b331374640b80271b21c2146b80203b21e22
1fb80202b21e221fb80201b21d281fb80200b21d281fb801ffb21d281fb8
01feb21d281fb801fdb21d281fb801fcb21d281fb801fbb21c2b1fb801fa
b21c2b1fb801f9b21c2b1fb801f8b21c2b1fb801f7b21c2b1fb801f6b21c
2b1fb801f5b21c2b1fb801f4b21b2f1fb801f3b21b2f1fb801f2b21b2f1f
b801f1b21b2f1fb801f0b21b2f1fb801efb21b2f1fb801eeb21b2f1fb801
edb21b2f1fb801ecb21b2f1fb801ebb21b2f1fb801eab21b2f1fb801e9b2
1b2f1fb801e8b21b2f1fb801e7b21b2f1fb801e6b21b2f1fb801e5b21b2f
1fb801e4b21b2f1fb801e3b21b2f1fb801e2b21a381fb801e1b21a381fb8
01e0b21a381fb801dfb21a381fb801deb21a381fb801ddb21a381fb801dc
b21a381fb801dbb21a381fb801dab21a381fb801d9b21a381fb801d8b21a
381fb801d7b21a381fb801d6b21a381fb801d5b21a381fb801d4b21a381f
b801d3b2193b1fb801d2b2193b1fb801d1b2193b1fb801d0b2193b1fb801
cfb2193b1fb801ceb2193b1fb801cdb2193b1fb801ccb2193b1fb801cbb2
193b1fb801cab2193b1fb801c9b2193b1fb801c8b2193b1fb801c7b2193b
1fb801c6b2193b1fb801c5b2193b1fb801c4b2193b1fb801c3b2193b1fb8
01c2b2193b1fb801c1b2193b1fb801c0b2193b1fb801bfb2193b1fb801be
b2193b1fb801bdb2193b1fb801bcb2193b1fb801bbb2193b1fb801bab219
3b1fb801b9b2193b1fb801b8b218411fb801b7b218411fb801b6b218411f
b801b5b218411fb801b4b218411fb801b3b218411fb801b2b218411fb801
b1b218411fb801b0b218411fb801afb218411fb801aeb218411fb801adb2
18411fb801acb218411fb801abb218411fb801aab218411fb801a9b21841
1fb801a8b218411fb801a7b218411fb801a6b218411fb801a5b218411fb8
01a4b218411fb801a3b218411fb801a2b218411fb801a1b218411fb801a0
b218411fb8019fb218411fb8019eb218411fb8019db218411fb8019cb218
411fb8019bb218411fb8019ab218411fb80199b218411fb80198b218411f
b80197b218411fb80196b218411fb80195b218411fb80194b218411fb801
93b218411fb80192b218411fb80191b218411fb80190b218411fb8018fb2
18411fb8018eb218411fb8018db218411fb8018cb218411fb8018bb21841
1fb8018ab217471fb80189b217471fb80188b217471fb80187b217471fb8
0186b217471fb80185b217471fb80184b217471fb80183b217471fb80182
b217471fb80181b217471fb80180b217471fb8017fb217471fb8017eb217
471fb8017db217471fb8017cb217471fb8017bb217471fb8017ab217471f
b80179b217471fb80178b217471fb80177b217471fb80176b217471fb801
75b217471fb80174b217471fb80173b217471fb80172b217471fb80171b2
17471fb80170b217471fb8016fb217471fb8016eb217471fb8016db21747
1fb8016cb217471fb8016bb217471fb8016ab217471fb80169b217471fb8
0168b217471fb80167b217471fb80166b217471fb80165b217471fb80164
b217471fb80163b217471fb80162b217471fb80161b217471fb80160b217
471fb8015fb217471fb8015eb217471fb8015db217471fb8015cb217471f
b8015bb217471fb8015ab217471fb80159b217471fb80158b216551fb801
57b216551fb80156b216551fb80155b216551fb80154b216551fb80153b2
16551fb80152b216551fb80151b216551fb80150b216551fb8014fb21655
1fb8014eb216551fb8014db216551fb8014cb216551fb8014bb216551fb8
014ab216551fb80149b216551fb80148b216551fb80147b216551fb80146
b216551fb80145b216551fb80144b216551fb80143b216551fb80142b216
551fb80141b216551fb80140b216551fb8013fb216551fb8013eb216551f
b8013db216551fb8013cb216551fb8013bb216551fb8013ab216551fb801
39b216551fb80138b215621fb80137b215621fb80136b215621fb80135b2
15621fb80134b215621fb80133b215501fb80132b215501fb80131b21562
1fb80130b215621fb8012fb215621fb8012eb215621fb8012db214221fb8
012cb214221fb8012bb213251fb8012ab213251fb80129b2122b1fb80128
b2122b1fb80127b2122b1fb80126b2122b1fb80125b2122b1fb80124b212
2b1fb80123b2122b1fb80122b2122b1fb80121b2122b1fb80120b211351f
b8011fb211351fb8011eb211351fb8011db210441fb8011cb210441fb801
1bb210441fb8011ab210441fb80119b210441fb80118b210441fb80117b2
10441fb80116b210441fb80115b210441fb80114b210441fb80113b21044
1fb80112b210441fb80111b210441fb80110b210441fb8010fb210441fb8
010eb210441fb8010db210441fb8010cb20f4b1fb8010bb20f4b1fb8010a
b20f4b1fb80109b20f4b1fb80108b20f4b1fb80107b20f4b1fb80106b20f
4b1fb80105b20f4b1fb80104b20f4b1fb80103b20f4b1fb80102b20f4b1f
b80101b20f4b1fb8010040ff0f4b1fff0f4b1ffe0f4b1ffd0f4b1ffc0f4b
1ffb0f4b1ffa0f4b1ff90f4b1ff80f4b1ff70f4b1ff60f4b1ff50f4b1ff4
0f4b1ff30f4b1ff20f4b1ff10f4b1ff00f4b1fef0f4b1fee0f4b1fed0f4b
1fec0f4b1feb0f4b1fea0f4b1fe90f4b1fe80f4b1fe70f4b1fe60f4b1fe5
0f4b1fe40f4b1fe30f4b1fe20f4b1fe10f4b1fe00f4b1fdf0f4b1fde0f4b
1fdd0f4b1fdc0f4b1fdb0f4b1fda0f4b1fd90f4b1fd80f4b1fd70f4b1fd6
0f4b1fd50e521fd40e521fd30e521fd20e521fd10e521fd00e521fcf0e52
1fce0e521fcd0e521fcc0e521fcb0e521fca0e521fc90e521fc80e521fc7
0e521fc60e521fc50e521fc40e521fc30e521fc20e521fc10e521f4098c0
0e521fbf0e521fbe0e521fbd0e521fbc0e521fbb0e521fba0e521fb90e52
1fb80e521fb70e521fb60e521fb50e521fb40e521fb30e521fb20e521fb1
0d621fb00d621faf0d621fae0d621fad0d621fac0d621fab0d501faa0d62
1fa90d621fa80d621fa70d621fa60d621fa50d621fa40d621fa30d621fa2
0d621fa10d621fa00d621f9f0d621f9e0d621f9d0d621f9c0d621f9b0d62
1fb8028840730d211f9a0c6f1f990c6f1f980c6f1f970c6f1f960c6f1f95
0c6f1f940c6f1f930c6f1f920c6f1f910c6f1f900c6f1f8f0c6f1f8e0b8a
1f8d0b8a1f8c0b8a1f101a01701a801a0270198019022f183f184f18031f
172f173f17039f17af170240171b1f4670148014d014e01404801301a010
01b8ffc0b3102c3046b8ffc04022101f2246700f01bf0f018f0e9f0eaf0e
03af0ebf0e02bf0ecf0edf0e03400e3e4246b80100b316010501b80190b1
54532b2b4bb807ff524bb008505bb00188b02553b00188b040515ab00688
b000555a5b58b101018e59b101024354b0114b515a58b101018e59858d8d
00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1
160042592b73747573752b2b737373012b737574737374002b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b002b2b732b2b2b2b2b2b2b73737374747373
2b2b737474752b742b73742b732b2b2b2b2b2b2b2b732b73737373737373
73742b2b2b73742b737373737473732b732bb1000243545841ff02030064
02020064020100640200006401ff006401fe006401fd006401fb006401fa
006401f9006401f8006401f7006401f6006401f5006401f4006401f30064
01f2006401f1006401f0006401ef006401ee006401ed006401ec006401eb
006401ea006401e9006401e8006401e7006401e6006401e5006401e40064
01e3006401e2006401e1006401e0006401df006401de006401dd006401dc
006401db006401da006401d9006401d8006401d7006401d6006401d50064
01d4006401d3006401d2006401d1006401d0006401cf006401ce006401cd
006401cc006401cb006401ca006401c9006401c8006401c7006401c60064
01c5006401c4006401c3006401c2006401c1006401c0006401bf006401be
006401bd006401bc006401bb006401ba006401b9006401b8006401b70064
01b6006401b5006401b4006401b3006401b2006401b1006401b0006401af
006401ad006401ac006401ab006401aa006401a9006401a8006401a70064
01a6006401a5006401a4006401a2006401a1006401a00064019f0064019d
0064019c0064019b0064019a006401990064019800640197006401960064
019500640194006401930064019200640191006401900064018f0064018e
0064018d0064018a00640189006401880064018700640186006401850064
018400640183006401810064017f0064017e0064017d0064017c417d0064
017b00640179006401780064017700640176006401740064017300640172
0064016f0064016e0064016d0064016c0064016b0064016a006401690064
016800640167006401660064016500640164006401630064016200640161
006401600064015f0064015e0064015d0064015c0064015b006401590064
015800640157006401560064015500640154006401520064015100640150
0064014f0064014e0064014d0064014a0064014900640146006401420064
0141006401400064013f0064013d0064013b006401390064013800640137
006401360064013500640134006401330064013200640131006401300064
012f0064012e00642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
000000>
[4943 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 686 22 <0001006fffee03e5052d00350046b12600bb01c40013002d01c4b30a1c36
26ba010f0027ffc0400c111648272ae72d130521420ab80116b40b0eea05
44003ffdd6ed3f123939fdd62bed0110d6c4e1d4f1c4313001140e022322
2e022735161633323e0235342e0635343e0233321e021715262623220615
141e0603e54c88bf7334675f54224bbb7756794d233b607b807b603b3876
b980214d4f4d214d9a4899903b607b807b603b01625d8c5d2e080c1009ac
1c201b354c31354b3b31343d53704d4382653e060b0e08a016176656354c
3c31343e5572>PBAAAA+Consolas AddT42Char 
1 902 131 <00020085ffee03c103fe0020002f004bb4151509011fb801b0b20d2127b8
01ca400f09300ccc012000220122221a205115b8010240091411f91a502c
f60452003fed3ffdd6ed3f12392f5d1239ed0110d6e1d4c4e13911392f31
302127060623222e02353436333335342623220607353e0333321e021511
0323220e0215141e023332363703250452a95d567a4f25e1dcd0727555a5
5821515a62325b926536afdd415e3c1d1228402e3c9b568751482c4d683d
97ab58596b26239d0c17120b28527c54fd4c01c91a30432a1d352918494f
>PBAAAA+Consolas AddT42Char 
1 1760 148 <000100c90000040803fe00130032b10212bb01b10013000801b140100913
14021108080013510cfb0550004f003f3fed3f12392f39390110d6d4e110
e139313013331736363332160723362623220e02071123c99f0559ad589c
a106b003535023474b5430b003ecb96b60cac784771937563dfd7b00>PBAAAA+Consolas AddT42Char 
1 2112 150 <0001003ffff203c9052d00170035b1100db801af40160a070708170f0818
0710f70c0a0d4f00fb1714f80352003ffdd6ed3f33cded320110d6d4c412
3910c4f1c531302506062322263511213521113711211521111416333236
3703c93b7e41bdbafee70119ae01c3fe3d737030723e0e0f0dabb1020c92
01142dfebf92fe026c6b0f10>PBAAAA+Consolas AddT42Char 
1 0 0 <000400580000040e051b00030007001f0031005cb900230199b22d0f0db8
0134b41010081a07be0132000200130140000800010133401004020d9810
102819991a069703410f20b8011db42804960143003ffddefdce3ffddeed
12392fed012fdde1d6e110f1c611392fe1c5d4e131300111211101112111
01140e0223072327333235342e0223233533321e0201321615140e022322
2e0235343e02040efc4a0358fd04026b2042674804640672902a4c6b4023
2969996531feb825310d172012121f170e0e171f051bfae5051bfb410462
fb9e02e82d5541279efc832d48331b64335167fdeb3325121f170e0e171f
121220180e00>PBAAAA+Consolas AddT42Char 
PBAAAA+Consolas /CharStrings get begin
/S 22 def
/a 131 def
/r 148 def
/t 150 def
end
PBAAAA+Consolas /Encoding get
dup 83 /S put
dup 97 /a put
dup 114 /r put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/MZQYND+Consolas /PBAAAA+Consolas findfont ct_VMDictPut
/MZQYND+Consolas*1 
[83{/.notdef}rp /S 13{/.notdef}rp /a 16{/.notdef}rp /r /.notdef /t 
139{/.notdef}rp]
MZQYND+Consolas nf
MZQYND+Consolas*1 [24 0 0 -24 0 0 ]msf
58.595 164.092 mo
(Start)
[13.2001 13.2001 13.2961 13.2001 0 ]xsh
505.465 155.852 mo
505.465 126.822 545.245 103.292 594.325 103.292 cv
643.405 103.292 683.185 126.822 683.185 155.852 cv
683.185 184.882 643.405 208.412 594.325 208.412 cv
545.245 208.412 505.465 184.882 505.465 155.852 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
505.465 155.852 mo
505.465 126.822 545.245 103.292 594.325 103.292 cv
643.405 103.292 683.185 126.822 683.185 155.852 cv
683.185 184.882 643.405 208.412 594.325 208.412 cv
545.245 208.412 505.465 184.882 505.465 155.852 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MZQYND+Consolas gcheck setglobal} if

1 0 3 <> MZQYND+Consolas AddT42Char 
1 246 4 <0002000a0000045c051b0007000a006440120a0304090405080201090100
200706090a08b8010e401c020303092809068f029f020202020407064105
050401010400000443003f332f11332f11332f3f3312392f5d123938332f
10ed3201192f33331a18cd327d87c4c40118cd327d87c4c4313021230321
03230133130303045cc25bfde05cb901b2f45cdddd011dfee3051bfca102
bbfd4500>MZQYND+Consolas AddT42Char 
1 2244 155 <0001003bfe60041d03ec00180050400d14131800201209011616191a15b8
ffe0b5161514125109b80103400f0a0dff01300401065613141418004f00
3f32322f333f393938fdd6ed3f1239393811120139192f3318c4331acd32
cd32313001010e032322262735161633323e0237013313173713041dfeaa
357186a0631a2a1916341d30534a4420fe6fc6fe333aeb03ecfc7e89c67f
3c02029e03051c3f644703ecfd689ca00294>MZQYND+Consolas AddT42Char 
MZQYND+Consolas /CharStrings get begin
/space 3 def
/A 4 def
/y 155 def
end
MZQYND+Consolas /Encoding get
dup 32 /space put
dup 65 /A put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MZQYND+Consolas*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 17{/.notdef}rp /S 13{/.notdef}rp /a 
16{/.notdef}rp /r /.notdef /t 4{/.notdef}rp /y 134{/.notdef}rp]
MZQYND+Consolas nf
MZQYND+Consolas*1 [24 0 0 -24 0 0 ]msf
561.275 149.692 mo
(Array )
[13.2001 13.2001 13.2961 13.2001 13.2001 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MZQYND+Consolas gcheck setglobal} if
1 1112 133 <0001009efff203ac03fa001d0038b20f0017b801b7b2061e0eb801094009
7f0f010f12f90b5000b80107b7701d011d1afa0352003ffdd65ded3ffdd6
5ded0110d6e1d4c4313025060623220035343e023332161715262623220e
021514163332363703ac448f4ceefeff4a86ba704e883e41874843775a34
b19d47853e251a190102f877c28a4b1619a6221f33608a57b6b52020>MZQYND+Consolas AddT42Char 
1 1418 135 <00020075ffee03f003fe001e00290040b30c0c1500b801b6b31f152904b8
01b74015152a1fcd8f040104042a24d11a500dd50c07f61052003ffdd6ed
3fed12392f5ded0110d6f1c410dde111392f31300114060721141633323e
023715060623222e0235343e0233321e0207362e0223220e020703f00202
fd3faca22c58524b2047b36081ba77393d75aa6c69a26f39b50320436442
395e442a05022b2532169aa5070c0f098f14194685c17a6abd8f544279ad
52436f502d2c50704300>MZQYND+Consolas AddT42Char 
1 1878 149 <000100b6ffee03bb03fe00350053b9002c01b3b51b241b240a00b801b5b3
110a3623ba01000024ffc0400c1219482427f6112c0720500ab80105400a
9f0baf0b020b0ef80752003ffdd65ded3f123939fdd62bed0110d6d4e111
39392f2fe1313001140e042322262735161633323635342e02272e033534
3e023332161715262623220e0215141e02171e0303bb243e525d622f66ab
5258ae567d781332695b44735430275ea0783b904e529336415937181539
6652597a4c2101123554412e1e0e1214a0191a443f1b2b272a1b1433465e
402a6456390d109b141314232f1b1b2c2929181a39465800>MZQYND+Consolas AddT42Char 
MZQYND+Consolas /CharStrings get begin
/c 133 def
/e 135 def
/s 149 def
end
MZQYND+Consolas /Encoding get
dup 99 /c put
dup 101 /e put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MZQYND+Consolas*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 17{/.notdef}rp /S 13{/.notdef}rp /a 
/.notdef /c /.notdef /e 12{/.notdef}rp /r /s /t 
4{/.notdef}rp /y 134{/.notdef}rp]
MZQYND+Consolas nf
MZQYND+Consolas*1 [24 0 0 -24 0 0 ]msf
554.555 178.492 mo
(access)
[13.2001 13.2001 13.2961 13.2001 13.2001 0 ]xsh
267.745 427.292 mo
267.745 398.262 307.525 374.732 356.605 374.732 cv
405.685 374.732 445.465 398.262 445.465 427.292 cv
445.465 456.32 405.685 479.852 356.605 479.852 cv
307.525 479.852 267.745 456.32 267.745 427.292 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
267.745 427.292 mo
267.745 398.262 307.525 374.732 356.605 374.732 cv
405.685 374.732 445.465 398.262 445.465 427.292 cv
445.465 456.32 405.685 479.852 356.605 479.852 cv
307.525 479.852 267.745 456.32 267.745 427.292 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Consolas AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MZQYND+Consolas gcheck setglobal} if
1 400 8 <000100c9000003b0051b000b0031b1060ab801a440140108010400010c06
e309090105e302410ae50143003fed3fed12392fed0110d6ddc4123910f1
c5313021211121152111211521112103b0fd1902e7fdcb021ffde1023505
1b96fe6b96fe3e00>MZQYND+Consolas AddT42Char 
1 1608 145 <0002005cffee040a03fe001300270024bc000001b30014001e01b3400a0a
2819f90f5023f80552003fed3fed0110d6e1d4e1313001140e0223222e02
35343e0233321e0207342e0223220e0215141e0233323e02040a427cb271
6cab773f427cb2716cab773fb2294c6d434e6f4721294c6c444e6f472101
fe75c38b4d4382c07d75c18b4d4381c0845d8b5d2f3d66874a5d8c5d2f3d
6687>MZQYND+Consolas AddT42Char 
MZQYND+Consolas /CharStrings get begin
/E 8 def
/o 145 def
end
MZQYND+Consolas /Encoding get
dup 69 /E put
dup 111 /o put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MZQYND+Consolas*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 3{/.notdef}rp /E 13{/.notdef}rp /S 
13{/.notdef}rp /a /.notdef /c /.notdef /e 9{/.notdef}rp /o 
2{/.notdef}rp /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
MZQYND+Consolas nf
MZQYND+Consolas*1 [24 0 0 -24 0 0 ]msf
323.385 435.656 mo
(Error)
[13.2001 13.2001 13.2961 13.2001 0 ]xsh
28.165 192.942 mo
28.255 198.442 li
28.515 203.962 li
28.945 209.472 li
29.545 214.962 li
30.305 220.452 li
31.235 225.932 li
32.305 231.392 li
33.545 236.822 li
34.945 242.242 li
36.485 247.632 li
38.175 252.992 li
40.015 258.332 li
41.995 263.632 li
44.105 268.902 li
46.365 274.132 li
48.755 279.312 li
51.275 284.462 li
53.925 289.552 li
56.705 294.602 li
59.605 299.602 li
62.615 304.552 li
65.755 309.442 li
72.375 319.032 li
79.435 328.362 li
86.895 337.422 li
94.765 346.172 li
103.005 354.602 li
111.585 362.692 li
120.505 370.402 li
129.725 377.742 li
139.235 384.662 li
149.005 391.152 li
159.015 397.202 li
164.115 400.052 li
169.255 402.772 li
174.445 405.372 li
179.685 407.852 li
184.975 410.192 li
190.295 412.412 li
195.655 414.482 li
201.065 416.422 li
206.495 418.232 li
211.965 419.892 li
217.445 421.409 li
222.965 422.772 li
228.505 423.991 li
234.065 425.053 li
239.645 425.956 li
245.225 426.709 li
250.835 427.296 li
256.435 427.718 li
262.635 427.972 li
262.705 426.414 li
256.515 426.16 li
256.535 426.162 li
250.955 425.742 li
250.985 425.744 li
245.405 425.159 li
245.425 425.162 li
239.855 424.412 li
239.875 424.415 li
234.325 423.515 li
234.345 423.518 li
228.805 422.461 li
228.835 422.465 li
223.315 421.25 li
223.325 421.255 li
217.835 419.902 li
217.855 419.902 li
212.385 418.392 li
212.405 418.392 li
206.955 416.742 li
206.975 416.752 li
201.565 414.952 li
201.585 414.952 li
196.195 413.022 li
196.215 413.032 li
190.865 410.962 li
190.885 410.962 li
185.585 408.762 li
185.595 408.762 li
180.325 406.422 li
180.345 406.432 li
175.125 403.962 li
175.135 403.972 li
169.965 401.382 li
169.975 401.392 li
164.845 398.672 li
164.865 398.682 li
159.785 395.842 li
159.815 395.862 li
149.825 389.832 li
149.855 389.852 li
140.115 383.372 li
140.145 383.392 li
130.665 376.482 li
130.685 376.502 li
121.485 369.192 li
121.515 369.212 li
112.625 361.522 li
112.645 361.542 li
104.085 353.482 li
104.105 353.502 li
95.895 345.092 li
95.915 345.122 li
88.075 336.392 li
88.095 336.412 li
80.645 327.382 li
80.665 327.412 li
73.625 318.102 li
73.645 318.132 li
67.045 308.562 li
67.065 308.592 li
63.935 303.712 li
63.945 303.732 li
60.935 298.802 li
60.945 298.812 li
58.065 293.832 li
58.065 293.842 li
55.305 288.812 li
55.305 288.822 li
52.665 283.752 li
52.675 283.762 li
50.155 278.632 li
50.165 278.652 li
47.785 273.482 li
47.795 273.502 li
45.545 268.292 li
45.555 268.312 li
43.445 263.062 li
43.455 263.072 li
41.485 257.792 li
41.485 257.812 li
39.655 252.502 li
39.665 252.512 li
37.975 247.172 li
37.985 247.202 li
36.445 241.832 li
36.455 241.852 li
35.065 236.452 li
35.065 236.472 li
33.835 231.052 li
33.835 231.072 li
32.765 225.642 li
32.765 225.662 li
31.845 220.202 li
31.845 220.232 li
31.095 214.762 li
31.095 214.782 li
30.495 209.312 li
30.495 209.332 li
30.065 203.852 li
30.065 203.872 li
29.815 198.382 li
29.815 198.412 li
29.725 192.922 li
cp
261.625 430.176 mo
267.675 427.277 li
261.725 424.176 li
cp
f
657.975 192.942 mo
657.895 198.442 li
657.665 203.952 li
657.275 209.462 li
656.755 214.952 li
656.075 220.442 li
655.255 225.912 li
654.295 231.372 li
653.195 236.802 li
651.965 242.222 li
650.595 247.612 li
649.095 252.972 li
647.465 258.302 li
645.715 263.602 li
643.825 268.872 li
641.835 274.102 li
639.715 279.282 li
635.125 289.522 li
630.105 299.572 li
624.635 309.402 li
618.775 318.992 li
612.515 328.332 li
605.885 337.382 li
598.905 346.142 li
591.605 354.572 li
583.985 362.652 li
576.075 370.372 li
567.895 377.712 li
559.455 384.642 li
550.795 391.132 li
541.905 397.182 li
537.385 400.022 li
532.825 402.752 li
528.215 405.352 li
523.565 407.832 li
518.875 410.182 li
514.145 412.392 li
509.395 414.472 li
504.605 416.412 li
499.775 418.222 li
494.935 419.882 li
490.055 421.403 li
485.155 422.766 li
480.235 423.987 li
475.305 425.05 li
470.355 425.954 li
465.395 426.708 li
460.415 427.296 li
455.435 427.718 li
450.495 427.943 li
450.425 426.385 li
455.355 426.16 li
455.325 426.162 li
460.275 425.742 li
460.245 425.745 li
465.195 425.16 li
465.175 425.163 li
470.105 424.413 li
470.085 424.417 li
475.015 423.517 li
474.985 423.522 li
479.895 422.464 li
479.875 422.47 li
484.775 421.255 li
484.755 421.261 li
489.625 419.902 li
489.605 419.912 li
494.455 418.392 li
494.435 418.402 li
499.255 416.752 li
499.235 416.762 li
504.045 414.962 li
504.025 414.962 li
508.795 413.032 li
508.775 413.042 li
513.515 410.972 li
513.495 410.982 li
518.205 408.772 li
518.185 408.782 li
522.865 406.442 li
522.845 406.452 li
527.475 403.982 li
527.455 403.992 li
532.055 401.402 li
532.035 401.412 li
536.585 398.692 li
536.565 398.702 li
541.065 395.862 li
541.045 395.882 li
549.895 389.852 li
549.875 389.872 li
558.515 383.402 li
558.485 383.422 li
566.895 376.512 li
566.865 376.532 li
575.025 369.222 li
575.005 369.242 li
582.885 361.552 li
582.865 361.572 li
590.455 353.512 li
590.435 353.532 li
597.715 345.132 li
597.695 345.152 li
604.655 336.422 li
604.635 336.452 li
611.245 327.422 li
611.225 327.442 li
617.465 318.142 li
617.445 318.162 li
623.295 308.602 li
623.285 308.632 li
628.725 298.832 li
628.715 298.862 li
633.725 288.842 li
633.705 288.872 li
638.285 278.662 li
638.275 278.682 li
640.385 273.512 li
640.385 273.532 li
642.365 268.322 li
642.365 268.342 li
644.235 263.092 li
644.235 263.102 li
645.975 257.822 li
645.975 257.842 li
647.605 252.522 li
647.595 252.542 li
649.085 247.202 li
649.085 247.222 li
650.445 241.852 li
650.445 241.872 li
651.675 236.472 li
651.675 236.492 li
652.765 231.072 li
652.765 231.092 li
653.715 225.652 li
653.715 225.672 li
654.525 220.222 li
654.525 220.242 li
655.205 214.772 li
655.195 214.792 li
655.725 209.322 li
655.725 209.342 li
656.105 203.862 li
656.105 203.882 li
656.335 198.392 li
656.335 198.412 li
656.415 192.922 li
cp
451.535 430.141 mo
445.465 427.277 li
451.395 424.142 li
cp
f
28.645 119.162 mo
28.665 117.492 li
28.735 115.802 li
29.005 112.452 li
29.455 109.112 li
30.075 105.792 li
30.855 102.502 li
31.785 99.242 li
32.875 96.022 li
34.105 92.842 li
35.475 89.732 li
36.985 86.672 li
38.615 83.672 li
40.365 80.752 li
42.225 77.912 li
44.215 75.152 li
46.295 72.492 li
48.475 69.922 li
50.755 67.452 li
53.115 65.112 li
55.565 62.872 li
58.095 60.762 li
60.685 58.782 li
63.335 56.932 li
66.055 55.232 li
68.825 53.682 li
71.645 52.292 li
74.515 51.062 li
77.405 50.012 li
78.875 49.542 li
80.345 49.122 li
81.815 48.752 li
83.295 48.422 li
84.775 48.152 li
86.275 47.922 li
87.765 47.732 li
89.255 47.602 li
90.765 47.532 li
92.255 47.502 li
93.775 47.532 li
95.275 47.612 li
96.765 47.732 li
98.255 47.912 li
99.755 48.142 li
101.245 48.412 li
102.715 48.732 li
104.205 49.102 li
107.125 49.972 li
110.025 51.022 li
112.885 52.222 li
115.705 53.602 li
118.475 55.132 li
121.195 56.802 li
123.855 58.622 li
126.445 60.572 li
128.975 62.652 li
131.415 64.852 li
133.785 67.172 li
136.055 69.602 li
138.245 72.132 li
140.325 74.762 li
142.305 77.482 li
144.175 80.282 li
145.925 83.162 li
147.555 86.112 li
149.065 89.132 li
150.425 92.202 li
151.665 95.332 li
152.745 98.502 li
153.685 101.712 li
154.465 104.962 li
155.075 108.242 li
155.525 111.542 li
155.625 113.112 li
154.065 113.212 li
153.975 111.662 li
153.975 111.722 li
153.535 108.472 li
153.545 108.502 li
152.935 105.262 li
152.945 105.302 li
152.165 102.092 li
152.175 102.132 li
151.255 98.962 li
151.265 98.992 li
150.195 95.852 li
150.205 95.882 li
148.985 92.792 li
148.995 92.822 li
147.645 89.782 li
147.665 89.812 li
146.165 86.822 li
146.185 86.852 li
144.575 83.932 li
144.585 83.962 li
142.845 81.112 li
142.865 81.132 li
141.015 78.362 li
141.035 78.382 li
139.075 75.692 li
139.095 75.722 li
137.035 73.112 li
137.055 73.142 li
134.885 70.642 li
134.905 70.662 li
132.655 68.252 li
132.675 68.272 li
130.335 65.982 li
130.365 66.002 li
127.945 63.822 li
127.965 63.842 li
125.465 61.792 li
125.495 61.812 li
122.935 59.872 li
122.965 59.892 li
120.335 58.102 li
120.365 58.122 li
117.675 56.462 li
117.705 56.482 li
114.965 54.982 li
115.005 54.992 li
112.225 53.642 li
112.255 53.652 li
109.435 52.462 li
109.475 52.482 li
106.615 51.442 li
106.665 51.462 li
103.775 50.602 li
103.815 50.612 li
102.355 50.252 li
102.375 50.252 li
100.925 49.942 li
100.945 49.942 li
99.485 49.672 li
99.505 49.682 li
98.035 49.452 li
98.065 49.462 li
96.605 49.282 li
96.625 49.292 li
95.155 49.172 li
95.175 49.172 li
93.705 49.092 li
93.725 49.092 li
92.245 49.062 li
92.275 49.062 li
90.805 49.092 li
90.825 49.092 li
89.355 49.162 li
89.375 49.162 li
87.905 49.292 li
87.935 49.282 li
86.475 49.462 li
86.495 49.462 li
85.025 49.692 li
85.055 49.682 li
83.595 49.952 li
83.625 49.952 li
82.165 50.272 li
82.185 50.262 li
80.735 50.632 li
80.755 50.632 li
79.315 51.042 li
79.335 51.032 li
77.895 51.492 li
77.925 51.482 li
75.065 52.522 li
75.105 52.502 li
72.285 53.722 li
72.315 53.702 li
69.535 55.072 li
69.575 55.062 li
66.835 56.592 li
66.865 56.572 li
64.185 58.252 li
64.215 58.232 li
61.585 60.052 li
61.615 60.032 li
59.055 61.992 li
59.075 61.962 li
56.585 64.062 li
56.605 64.032 li
54.185 66.252 li
54.205 66.222 li
51.865 68.552 li
51.895 68.522 li
49.635 70.972 li
49.655 70.952 li
47.495 73.492 li
47.515 73.462 li
45.455 76.102 li
45.475 76.082 li
43.505 78.812 li
43.525 78.782 li
41.675 81.592 li
41.695 81.572 li
39.955 84.462 li
39.975 84.432 li
38.365 87.402 li
38.375 87.372 li
36.885 90.402 li
36.895 90.372 li
35.535 93.462 li
35.555 93.422 li
34.335 96.572 li
34.345 96.542 li
33.265 99.722 li
33.275 99.692 li
32.355 102.912 li
32.365 102.882 li
31.595 106.132 li
31.605 106.092 li
30.995 109.382 li
31.005 109.342 li
30.555 112.642 li
30.565 112.602 li
30.295 115.922 li
30.295 115.882 li
30.225 117.542 li
30.225 117.522 li
30.205 119.192 li
cp
157.795 112.012 mo
155.105 118.162 li
151.795 112.322 li
cp
f
531.205 119.172 mo
531.225 117.282 li
531.295 115.392 li
531.565 111.622 li
532.015 107.862 li
532.625 104.132 li
533.405 100.432 li
534.335 96.762 li
535.425 93.142 li
536.655 89.572 li
538.025 86.062 li
539.525 82.622 li
541.155 79.252 li
542.905 75.962 li
544.765 72.762 li
546.745 69.662 li
548.825 66.662 li
551.005 63.762 li
553.285 60.992 li
555.645 58.342 li
558.095 55.822 li
560.615 53.442 li
563.205 51.212 li
565.865 49.142 li
568.575 47.222 li
571.345 45.472 li
572.755 44.662 li
574.175 43.902 li
575.605 43.182 li
577.045 42.512 li
578.485 41.892 li
579.945 41.312 li
581.405 40.792 li
582.875 40.322 li
584.355 39.902 li
585.835 39.532 li
587.325 39.212 li
588.825 38.952 li
590.315 38.752 li
591.815 38.602 li
593.325 38.512 li
594.825 38.482 li
596.345 38.542 li
597.845 38.622 li
599.345 38.772 li
600.835 38.962 li
602.325 39.222 li
603.815 39.532 li
605.305 39.902 li
606.775 40.312 li
608.255 40.772 li
609.715 41.292 li
611.175 41.852 li
612.615 42.472 li
614.055 43.132 li
615.475 43.842 li
616.905 44.592 li
618.305 45.392 li
621.075 47.122 li
623.795 49.012 li
626.455 51.052 li
629.045 53.262 li
631.565 55.612 li
634.015 58.092 li
636.375 60.702 li
638.645 63.442 li
640.835 66.302 li
642.915 69.262 li
644.885 72.332 li
646.755 75.492 li
648.505 78.732 li
650.135 82.062 li
651.635 85.452 li
653.005 88.922 li
654.235 92.442 li
655.315 96.012 li
656.245 99.632 li
657.025 103.292 li
657.635 106.972 li
658.085 110.682 li
658.235 113.092 li
656.675 113.182 li
656.535 110.802 li
656.535 110.852 li
656.095 107.182 li
656.095 107.212 li
655.495 103.562 li
655.495 103.602 li
654.725 99.972 li
654.735 100.002 li
653.805 96.422 li
653.815 96.452 li
652.745 92.902 li
652.755 92.942 li
651.535 89.452 li
651.545 89.482 li
650.195 86.042 li
650.205 86.072 li
648.715 82.702 li
648.725 82.732 li
647.115 79.432 li
647.125 79.462 li
645.385 76.242 li
645.405 76.272 li
643.555 73.132 li
643.565 73.162 li
641.605 70.122 li
641.625 70.152 li
639.565 67.212 li
639.585 67.232 li
637.415 64.402 li
637.435 64.432 li
635.185 61.712 li
635.205 61.742 li
632.865 59.152 li
632.885 59.172 li
630.465 56.712 li
630.495 56.742 li
627.995 54.412 li
628.015 54.442 li
625.455 52.252 li
625.485 52.282 li
622.855 50.252 li
622.895 50.282 li
620.195 48.412 li
620.235 48.432 li
617.495 46.732 li
617.515 46.742 li
616.135 45.952 li
616.155 45.972 li
614.755 45.222 li
614.775 45.232 li
613.375 44.542 li
613.395 44.552 li
611.975 43.892 li
611.995 43.902 li
610.575 43.302 li
610.595 43.302 li
609.165 42.752 li
609.185 42.762 li
607.745 42.252 li
607.765 42.262 li
606.325 41.802 li
606.345 41.812 li
604.895 41.402 li
604.915 41.412 li
603.465 41.052 li
603.495 41.052 li
602.025 40.752 li
602.055 40.762 li
600.585 40.502 li
600.615 40.512 li
599.145 40.312 li
599.175 40.322 li
597.705 40.172 li
597.735 40.182 li
596.265 40.092 li
596.275 40.092 li
594.795 40.042 li
594.835 40.042 li
593.365 40.072 li
593.395 40.072 li
591.915 40.152 li
591.955 40.152 li
590.485 40.302 li
590.505 40.302 li
589.045 40.492 li
589.075 40.492 li
587.605 40.742 li
587.635 40.742 li
586.175 41.052 li
586.205 41.052 li
584.735 41.412 li
584.765 41.402 li
583.315 41.812 li
583.345 41.812 li
581.895 42.272 li
581.925 42.262 li
580.485 42.782 li
580.505 42.772 li
579.065 43.332 li
579.095 43.322 li
577.665 43.942 li
577.685 43.932 li
576.275 44.592 li
576.295 44.582 li
574.885 45.292 li
574.905 45.272 li
573.505 46.032 li
573.525 46.022 li
572.135 46.822 li
572.165 46.802 li
569.425 48.522 li
569.465 48.502 li
566.775 50.402 li
566.805 50.382 li
564.185 52.432 li
564.215 52.412 li
561.645 54.612 li
561.675 54.592 li
559.175 56.952 li
559.195 56.922 li
556.775 59.422 li
556.795 59.392 li
554.455 62.022 li
554.475 62.002 li
552.225 64.742 li
552.245 64.712 li
550.085 67.592 li
550.105 67.562 li
548.035 70.532 li
548.055 70.512 li
546.095 73.592 li
546.105 73.562 li
544.265 76.732 li
544.275 76.712 li
542.535 79.972 li
542.545 79.942 li
540.935 83.282 li
540.945 83.252 li
539.455 86.672 li
539.465 86.652 li
538.115 90.132 li
538.125 90.102 li
536.905 93.642 li
536.915 93.612 li
535.835 97.192 li
535.845 97.162 li
534.925 100.802 li
534.935 100.772 li
534.155 104.432 li
534.165 104.402 li
533.555 108.102 li
533.565 108.062 li
533.115 111.792 li
533.125 111.752 li
532.855 115.492 li
532.855 115.462 li
532.785 117.332 li
532.785 117.312 li
532.765 119.182 li
cp
660.405 112.012 mo
657.665 118.132 li
654.415 112.272 li
cp
f
180.745 155.072 mo
500.495 155.072 li
500.495 156.632 li
180.745 156.632 li
cp
499.495 152.852 mo
505.495 155.852 li
499.495 158.852 li
cp
f
595.585 207.972 mo
595.495 209.922 li
595.205 211.912 li
594.735 213.892 li
594.095 215.862 li
593.275 217.822 li
592.275 219.772 li
591.115 221.712 li
589.795 223.642 li
588.305 225.552 li
586.665 227.462 li
584.865 229.342 li
582.915 231.232 li
580.815 233.092 li
578.575 234.942 li
576.185 236.772 li
573.655 238.582 li
570.995 240.392 li
568.205 242.172 li
565.265 243.942 li
562.215 245.682 li
559.035 247.412 li
555.725 249.122 li
552.305 250.812 li
548.755 252.472 li
541.335 255.732 li
533.465 258.892 li
525.195 261.942 li
516.525 264.882 li
507.495 267.692 li
498.125 270.382 li
488.425 272.942 li
478.435 275.352 li
468.165 277.612 li
457.645 279.722 li
446.885 281.662 li
435.925 283.422 li
424.785 285.022 li
413.475 286.412 li
402.035 287.622 li
390.485 288.622 li
378.825 289.422 li
367.115 289.992 li
355.345 290.342 li
343.555 290.462 li
331.765 290.342 li
319.995 289.992 li
308.285 289.432 li
296.625 288.642 li
285.075 287.652 li
273.635 286.472 li
262.325 285.082 li
251.185 283.512 li
240.225 281.762 li
229.475 279.852 li
218.945 277.772 li
208.685 275.542 li
198.685 273.162 li
188.985 270.632 li
179.615 267.972 li
170.585 265.192 li
161.915 262.282 li
153.645 259.272 li
145.785 256.162 li
138.355 252.942 li
134.815 251.292 li
131.385 249.632 li
128.075 247.942 li
124.895 246.232 li
121.845 244.512 li
118.915 242.772 li
116.125 241.012 li
113.455 239.222 li
110.935 237.432 li
108.545 235.622 li
106.295 233.792 li
104.195 231.952 li
102.245 230.102 li
100.455 228.242 li
98.805 226.352 li
97.315 224.462 li
95.995 222.552 li
94.835 220.642 li
93.845 218.712 li
93.005 216.752 li
92.305 214.082 li
93.815 213.682 li
94.495 216.302 li
94.465 216.192 li
95.265 218.072 li
95.245 218.022 li
96.205 219.902 li
96.185 219.862 li
97.315 221.722 li
97.285 221.682 li
98.585 223.552 li
98.555 223.512 li
100.025 225.372 li
99.995 225.342 li
101.615 227.192 li
101.585 227.172 li
103.355 229.002 li
103.335 228.982 li
105.265 230.812 li
105.235 230.792 li
107.315 232.612 li
107.295 232.592 li
109.515 234.402 li
109.495 234.382 li
111.865 236.182 li
111.845 236.172 li
114.345 237.952 li
114.335 237.932 li
116.975 239.702 li
116.965 239.692 li
119.735 241.442 li
119.715 241.432 li
122.635 243.162 li
122.625 243.152 li
125.655 244.872 li
125.645 244.862 li
128.805 246.572 li
128.795 246.562 li
132.085 248.242 li
132.075 248.232 li
135.485 249.892 li
135.475 249.882 li
139.005 251.522 li
138.985 251.512 li
146.395 254.722 li
146.365 254.712 li
154.215 257.812 li
154.195 257.812 li
162.445 260.812 li
162.425 260.812 li
171.075 263.712 li
171.055 263.702 li
180.065 266.482 li
180.055 266.472 li
189.405 269.132 li
189.385 269.132 li
199.065 271.652 li
199.055 271.642 li
209.035 274.022 li
209.025 274.022 li
219.275 276.242 li
219.255 276.242 li
229.765 278.322 li
229.755 278.312 li
240.495 280.232 li
240.475 280.222 li
251.425 281.972 li
251.405 281.972 li
262.535 283.542 li
262.525 283.542 li
273.815 284.922 li
273.805 284.912 li
285.225 286.102 li
285.215 286.102 li
296.755 287.092 li
296.745 287.092 li
308.385 287.872 li
308.365 287.872 li
320.065 288.442 li
320.055 288.442 li
331.805 288.782 li
331.785 288.782 li
343.565 288.902 li
343.545 288.902 li
355.325 288.782 li
355.305 288.782 li
367.055 288.432 li
367.045 288.432 li
378.745 287.862 li
378.725 287.862 li
390.365 287.062 li
390.355 287.072 li
401.895 286.072 li
401.885 286.072 li
413.305 284.862 li
413.295 284.862 li
424.585 283.472 li
424.575 283.472 li
435.705 281.882 li
435.685 281.882 li
446.635 280.122 li
446.615 280.122 li
457.355 278.192 li
457.345 278.192 li
467.845 276.082 li
467.835 276.092 li
478.085 273.832 li
478.075 273.832 li
488.055 271.422 li
488.035 271.432 li
497.725 268.882 li
497.705 268.882 li
507.055 266.202 li
507.045 266.202 li
516.055 263.392 li
516.035 263.402 li
524.685 260.462 li
524.665 260.472 li
532.915 257.432 li
532.895 257.432 li
540.735 254.282 li
540.715 254.292 li
548.115 251.052 li
548.105 251.052 li
551.635 249.402 li
551.625 249.402 li
555.035 247.722 li
555.015 247.732 li
558.315 246.032 li
558.295 246.032 li
561.465 244.322 li
561.445 244.332 li
564.485 242.592 li
564.475 242.592 li
567.385 240.842 li
567.375 240.852 li
570.145 239.082 li
570.125 239.092 li
572.775 237.302 li
572.755 237.312 li
575.265 235.512 li
575.245 235.532 li
577.615 233.712 li
577.595 233.732 li
579.815 231.892 li
579.795 231.912 li
581.865 230.072 li
581.845 230.092 li
583.775 228.232 li
583.745 228.262 li
585.515 226.402 li
585.495 226.432 li
587.115 224.552 li
587.085 224.582 li
588.545 222.702 li
588.525 222.742 li
589.815 220.852 li
589.795 220.892 li
590.925 218.992 li
590.905 219.042 li
591.865 217.142 li
591.845 217.192 li
592.645 215.282 li
592.625 215.352 li
593.245 213.432 li
593.225 213.502 li
593.675 211.582 li
593.665 211.652 li
593.945 209.732 li
593.935 209.812 li
594.025 207.892 li
cp
90.245 215.322 mo
92.305 208.932 li
96.175 214.412 li
cp
f
%ADOBeginSubsetFont: MZQYNE+Cambria#20Math-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (MZQYNE+Cambria#20Math)
%%Title: (MZQYNE+Cambria#20Math Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /MZQYNE+Cambria#20Math def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2464 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 7320 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 12 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
1861 <001C60D8A8C9B82F05F6C813768BD5D002ABF1B23C4A74FEED94B5201E
7FA9D45CD16059D7B8FAF1B06B6006C6C257BE6BB002400E3C46CA4726561227
D353BF39F0691C5D40C5AE49D2A8AC6D95C7C7E8A1C0F34696397AEC3BC2C820
5CED4FA0C1B1BFE00ED33912E4B00A76B772C268411B0BC5DDD61A3481233095
BC1AA237FA93AC24C58ABD28> |
1866 <001C60D8A8C9B7FD84A4785742EF375932A7EED3F0D521E6362E3686FB
1CE3943098A0376C2042F572D236FFE4971DE7454071FF757680901DBC804C76
5F4B2F120F07D522A0BF8B64DC4A49D39030B6E4CF17516FC0DF3420550889C2
3154EBA2AA9C793D35FE4A8BE97648893AA6B75394EC7ADA61159AA4A9568164
8674D65BAE391A36FE453BD8538F5A971990C5925ECF59844F1D6CA78D6A056F
01E977D030EB99A0152027B11D0BD28DAB4FF154C39919847D935C8CFBECC699
88757401317A7F80055ECF05BDA0D6533D4463FF2606036E189E33E0EF2C4B5F
892741D6FC22471A5A98AB60C703367EAFCFF6974321A66FD58B37EE3F9EF5F6
24210F8956004EBDB15B9F46D8> |
1856 <001C60D8A8C9B7F7BF9570FBB742D272A1DB04B6286D40FEAC55522A4C
20CCADD483BA0BFC1818D8D0A744F7194199C3D4CFAFF04D16908AC30FAB792A
5E18348B36E87CEB47F87CD3AB28D0E570A72E2E6BF9B496D8AB06E7401D7C75
6C683A54DF00C64BD40C5CD441B160916C57700FD48ACED3A38862B27A176658
80436D0F952BD9F15E608C8E3216E4C95763214465F3762C1258CBB1F1C075F0
564AEDCF8C621AFC5675A318186EEB217F26A1D29C8680976834D70BE4FB1DEE
CD0DF9F94B5EC4A77BEBD681A6AEC5ABBA6B30727DB0A2773ABCC919E5C74C16
78A6A26A9DF2E441304E913B49F1AF2FBD649534FAEB8DA36EE0EFF4841F723A
6E2449716FD660CCD998900E5A138CD1F1300A0766F2B1363FD2F8CB0A17D6C0
CCC6FD274C940675652B8E31A82BB9FEB9781C0CD35621> |
1857 <001C60D8A8C9B7AB676D2B474C469BAEFE4CB79113AD639D26E2AB1350
90B40A373A81FDB8A6DF8851C83E6499BF4A0129CF4779E3A8F344261777897C
9965C9EF53BFAFCBC6895A20DB4F807F3E46BD0626A719D52E91CF5618DDDAA4
9429953B06D25362026409045DB9831FBB619552CF2A8794F5A9AE56ED9DE3A4
6B6F0E61D23A4E9F82720FB6FE12E14BD0E795D4E581A6F27CC110087C007972
2A45D19A7FDA82E777EF85D2CB8C241100124441F9733260477B38F2C06ADB3E
1D> |
1876 <001C60D8A8C9B7876E744F4C06163AFDD9E9C14CFB43302889E42E0875
F108D0DA19D09A427AD4AAF19F7BF37E7877ADDDF87E364AA91FD690598EDBAA
44A9C2B69ACF0AC9DAF686C797A3599CF7FF2C92E0A713A72315DC9FCCA12A18
9000BC02EB2E7DFEFF112BBC2F54F4E49363BD3624F281336E87A8BBEA6655C3
DD93B629DFB7728AC5DADBE4EF1A3199A7E53936D05892FC627FF8E89691CA51
62F58D7E770487EE813D19FCAFDC99FCAD13A7DF313DE21CE702A622C634A14F
F7B24269725E3AF54F6D307156D6F6ABF0F8783DD10BE37CDFC85D88F25C927A
A98E78896A19D956059C874B1ED92A4F23AC09D37A34143A5A8A94EE11851CE9
EB8F392CEE174F0DA39B0A199F750222A8797CF4A2220B5528A1E0F481AB6CDB
3304B3ECE40012487B9EB7D71AB20C526CA003BC188EEC3DE434A838D0BFA6D4
7E4CA471E534E06757E8ED5A67FEDAD6ABB1D5375B63FF0EB69C787D5E091256
D6F8D5A92A0467D46B7465E1B184890316201A291649AC6AA82B5144E48D8E15
5EE957B55EB44FAC33B86B96C51F5B> |
3410 <001C60D8A8C9B6E081BE0F5FDFB532EA4A3BD2B8EDD3BA90DF4D5DAD6D
8EB0A0094C0F6456490D7FB9F8C50CC7B80C75E454> |
882 <001C60D8A8C9B7917E8A7AB31FEDACD572D20F7B91833F9A4898ED62311
9BB2F52465CB6887AB1C54843AD180900E63F1047E4A455B669201A3450AFD4A
F362A2CBFD3F179E85F74E1B0D8DB9E5A157F8F3D7DC6856F244B5023E3850A5
42473FDDCC39B38C8FC522BE50EFAA42E63AE6F8C3687AA29D2BFC3655DFE7F3
4B715418220E76032399DEB9E9DB85F611B2584A28B937444D626C557D0ACDC5
683273F1C8FA5550822D0FA98D8> |
428 <001C60D8A8C9B625CE6B1B2824DFDE3068465BF5713CC777E9D727C81B4
1A54475BE5E9A081B03243F52EB35EF2D0090AAAEB26DE00449EC025DA359087
298BCD48346637398E0F17313C9199B9AE5CE5EDE60AF237F0DDA73215F57B25
D29A58385538B4B8CEF5493D0F7AB4F0A531464B4E7FC51905373A9678BFB5ED
FEFA65EB7DB025995DD8BBCB6D239600118FB229D265DC1CFB15D631B5AC3C64
71DBEF153835A5F5EC19B41E35FB20E19C0EAB7B3A6AEAC2097A442698C8AA19
BECC293414B5BD9C8E38D85D4F3161C787E3D2F2F09F605EE161A1916B7B4F65
5B3F37BA32733CDAAEC9CAF5C0616C35591571DC871FD8A75F37729455BC3D79
248788CA5669332CCFC83B68B4E146D40B55B9B372A7B6CAC8D75F9906E76480
8038C53C5DD377731BDD495D448A851B211C717E0C625F8D9CFB96709BEAB077
5207CC74A2A56A37380EF3D3283BC6F3CDA576830D3502FDA45E795277EEDBF8
82632801BE4C30EBC3A18DB1A58B6BE91CC6CD49704F129D7D6FA37C476064D2
1FF58767DB2ACE72FF65BCBC8DC955A618F7FC73CB440DB5B69BDC1E0109711B
53BB31E50543EB70E01DAB9D0899C0C039B262DEDDB7BC32E006C426739CC863
C0501B2F374924A1A7B79F195241482D9F2E5A5CE3AF30146F29FB5934409162
BEB6AC9482D1F4A7979CFDE687B44E929C339A7F1134478> |
3407 <001C60D8A8C9B6E081BE0FD1E3495E3069324AA8FF25F271FF00FCB845
F250B103EEDC5D> |
1839 <001C60D8A8C9B686F7DD1E34B949843A0717C49DEF01E7F63307DC6EDF
9189F9E1C7E243304BCB9CC528CBA9FE4A2AFA5EBB0F5CC557B504DFB2A1AAA0
741241B06D47A1B589A63447119A90316F8883047262C5459AF14ECE3CF3CD63
3D0C1D744CE5A3B0F62A4A42DBE36BBF8BE52B641E847C37454F7B8E79FFB4C3
93D18703E06791B3041B7FC1203C80CA3A602BE69199F4AED392E1085B9B43D0
E8E2293AC908D0D400D6D72A7164D30BCBB2AC1085777605E68FCA44FA7EE61F
1F94DFBA38970CCE8EBEAB869B5DEEBE9EC620E3DD8893ED332EED885F79C341
42DC2367BC7988D093F3A3846C523B579089012C731FC4053AD1DF9335193008
243B520AE5D0B24299D010EB433820F1F9> |
1853 <001C60D8A8C9B7EE7C1908F1523D8EA9801A20624497B8F17A94E1EDFB
00E5A43A6C2C0516F07AC4F31FCA17042581FE4B349FFAEF6370BAE1DC1FD110
80DC607FE95F8D7A11056EC8B4570E93F304C22FC2892468893BBE32998158F7
8DE7E899E532633A1CDAAA322D4EB39EE8EBEE9D81C67BB495DBB2871020237F
6C6A1842380EE747C231260169BFFC8861434F53CB84CDA7145D122E739F06D9
3477A22F7274943D46614FB2E571F07CA89AC51ADF8DDB6F65520BC9E53264A1
531C2E25CD21605DE1A72D15951C5B5B88348C38C443C860FB5A6F4BCC634856
D086F479C993D02598695267DEF47E5746871404429A3A78B3B08B81CCBA347D
92> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /MZQYNE+Cambria#20Math-Identity-H /Identity-H 0 [/MZQYNE+Cambria#20Math] ct_ComposeFont pop end end
%ADOEndSubsetFont
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
240.995 146.412 mo
(\007E\007J\007@\007A)
[5.70602 10.3321 10.44 0 ]xsh
276.395 146.412 mo
(\007T)sh
291.515 146.412 mo
(\015R)sh
310.115 146.412 mo
(\003r)sh
324.035 146.412 mo
(\001\254)sh
340.475 146.412 mo
(\007E\007J\007@\007A\007T)
[5.70602 10.3321 10.44 8.9281 0 ]xsh
391.025 146.412 mo
(\015O)sh
409.505 146.412 mo
(\007/\007=\007T)
[15.318 10.098 0 ]xsh
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
392.895 26.262 mo
(\007E\007J\007@\007A)
[5.70605 10.332 10.4401 0 ]xsh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
428.295 26.262 mo
(\007T)sh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
443.415 26.262 mo
(\015R)sh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
461.915 26.262 mo
(\003r)sh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
475.955 26.262 mo
(\001\254)sh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
492.395 26.262 mo
(\007E\007J\007@\007A\007T)
[5.70605 10.332 10.4401 8.92804 0 ]xsh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
542.915 26.262 mo
(\015O)sh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
561.395 26.262 mo
(\007/\007=\007T)
[15.318 10.098 0 ]xsh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
600.875 26.262 mo
(\001\254)sh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
%ADOBeginSubsetFont: MZQYNE+Cambria#20Math-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MZQYNE+Cambria#20Math 5 GetGlyphDirectory
1865 <001C60D8A8C9B6BBBB4CE52FD48B04492F7E2C4553CF0682951AD3A11A
ECF5831A24A87C656A0D69E6B3A251121847A5EA1C42A3D4422CDEA588338B32
9750F0A21E389D7D04917B8E0ACA60B7997D45B0836F74AFD6FDE4233E53F1F6
127E777380EEE7D644B44B14EC752B448386E02915FE5315C2CFB862ADF5307C
3ADF3535657C54800CA813541B5D904AFBFB775874DD86710268602C0E5BBC31
0A11B1D779465B97010A9B5C439F33CE26F763FF4EE9D0BB02390100AEBF7198
900CB69F81F2486BB82B1A92109E77D3BCD82CCA2A769CC7ED004C622FD636E5
D01CC548E1471CF36E70E39058B430208A1E3AF422D6C443EFD472954ED4BB47
FBBDDD475260AB8774591ED7869BB582A2B98C39A83C4FBC10EE32BB74D4A526
8EE261014DECA557D409538090630A4266CD16A5F399EF2B8A5C9DF935D4F2D5
C755543176CBAD27E7678CBF00EBDB643D350F6E0628D52A63084D51D2658892
04740B8A96BFD413C7F2E23CEFF78D9DFA2C7B8E1F058071> |
1873 <001C60D8A8C9B7FD8495C2DF65A5463AD534371DAE94C19CB86356D209
C7D6C1E226D289204650AEDC0C5DB933EA280BEF51E97D849F1D5AF17B5B5A3A
495A50A69D266F27B86A6C00E37FC7C75C2E9ADBE84B2E554091790BF45661B7
78D414A218CE7B14F95A941C3351727FFE2E7C37B56851444B6E535ED91CE045
164F8264127EDE5263296CE4B3E47AC8A40B88B856C086036B746885C441FE51
3E68AB75270EBD613EBF95A8E7700FB7D6828BC6B365E6F759D8BED90123CE26
48EE61DFBF74B91E56740920EEC047BD0DB799767B1F102E1BCBFE004D3AB2BA
8DCA736F1D34ED421EBE07BEEB0941A329645B621B14B49923B1821102EC0787
3AC85D43C3A412FF800FC4711DDE9EC07F10DCED37C661823FC19D8F6907> |
1864 <001C60D8A8C9B82E3491B38B14CACFB3729C41091A9561EAECD2269DC0
F0FAE766564B010CF54A5BA91E63C2F06BD1ED2B48CFEBEDDB5FE2E109246519
4023F9D96EDC170589CEBD3872113791F9AEBC02DF210A23782F9CF1AB72811B
C10C14AC14960BA4D7280C69F9A52913E7E6152901C2EF270809C83DAE613FCB
779825EE0A3CB34AF58FDC3C> |
1872 <001C60D8A8C9B730312D06925FC3E316998582E073D2AED498E58DF994
C139E0633A35DDB51C0CE5513E55A383FCD32BD691C4AD1A14513F46BD9C1CC5
57A94AF2E9E53390B7BB475095B52324F63288A8415446317AB1445DDB3F2AD3
C4F252D232AC22BB24F30A42A20CD28D93C86311707FA6850C9C87441E5FB601
C2B08BD963D05CBACFD0E6E609> |
1868 <001C60D8A8C9B7EDAFE893F5FC1FF656FC61BE6EC450AACD5A0DF9BB13
1EBD8DF8B5ED5CF5AEEA3D84F24972B3E5CA4CBC5799371AEB2AA83D0C0E5D42
9141DCFE144FC38BC7DC3592F24D29DDCEB8DD9E7BF8D949F8090C8588B3889B
29F10E5823C1417A315379DF47B7D7DBC2DEB37100C8B3638A9709DC4D4EAFCF
F4152048F08FC6BF0F3ED91D4629E11321E4B2036D6A77F7AFAD51F43A67D6B0
C181316B971D49CA151A7C8215977BC9D131A48D26F07B2DB21EF4514B0FF716
5E21572640CA8FFFF5CE5255DB0CB294F8D7537748C4BC7ABFE4A62C27C77A26
4CD1AE452E837CFC1F5B3062EC78631419B149B770366CCA5E1D5A58ABBDE651
C162E754AFAE135937FFA6A8FB5F7F45DFF9F3B84D969D741CD7E577D0ACF516
FE24> |
!
end
end end
%ADOEndSubsetFont
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
617.315 26.262 mo
(\007I\007Q\007H\007P\007E\007L\007H\007A)
[15.0839 10.3322 5.68787 7.11011 5.70599 10.044 5.68787 0 ]xsh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
%ADOBeginSubsetFont: MZQYNE+Cambria#20Math-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MZQYNE+Cambria#20Math 2 GetGlyphDirectory
1860 <001C60D8A8C9B790A80E4E7F3D0F05A63C95F2D27A8327EFAEA9D3979E
3C8FE2B236B39F2BEAC6D3B6F755175F9C0A6FCD976A9A819DA9C1830A78F60E
558ED8E3EAD12EAD418FB4A766437365895D6BB43B929950569C260DE7396564
191CEBE3328ED51518ADEB3B2D7FB62747261F5408A94DC4E1AA1699004DFF09
A543D7B7E323936451B06FDF39B1F376AB904502F0CFC64CCAD45917AD5AB030
4F2696067F67FC101CF6F48BDB2D54EF8BD8AB0F9D9A97BD31077FB4959F9B50
211BC2013AC2B1D844FC6F0EEBA586DA95F6AC91E76D3F56332CCA038192F3E0
10476CC7593A> |
1870 <001C60D8A8C9B75F2F61CDE33712E054D32691F1D907C4B3025FA9B379
1D00C65297F0081BE733A333FAF7650DF7EAB42D1FA143B917E8EEEC6C7599A5
06B6C6E1A1C49CD7750F30CB6149F980B5AF45A08F1A7A5BF6F182D1C70E0B04
DEFA424941552BB30B9A3918E53CE686EBE5B2033267F2AF42DAB3CF0F998AA7
E1AA4ABA1CF7C1A9BA5502F65E3814C70D4072BFF585A35FE0E972B3EE48A9CC
239103BC7233D1EBEB6B14B2C8C937F0428C0ACAC097A8213A> |
!
end
end end
%ADOEndSubsetFont
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
690.185 26.262 mo
(\007P\007D\007N\007A\007=\007@)
[7.11005 9.93579 8.56799 8.83789 10.0621 0 ]xsh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
%ADOBeginSubsetFont: MZQYNE+Cambria#20Math-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MZQYNE+Cambria#20Math 2 GetGlyphDirectory
1855 <001C60D8A8C9B74F366DF1E770CA3E494094D4E642446DA20E6F84ACE5
E7F844900EA6B95E236DD7C64831B36F8EEA3D3304CEBCA4341CD75D33F5BA8A
EAD36FFA3CE25ECC0DD3620CA5C7C0F321D387FD019B740A0281F3BAA7002993
ADEA529CE213E7010BCC3579D4254D836CCAC683318FEEB419D9D7F0F18C5597
065EE857D0B3AD5EF35537610674490632FA763F07E9BA04E83A1F87C1BD4F> |
1871 <001C60D8A8C9B74D93A5A192672FD228D4708B61E2554DD8941DE75CB8
7C3586EC5E14A1E5A88489B38F826BC24E60FDD443754BAFB8BCA8D802BD51F1
9080A7A99BBA66DE627ECEBD72EAC075CB339AC272414E3EEAA47F0E24F98312
21FAA83E408D51273FBF07CF742AD6D3DD7555B8331B48C70C78D06A527A8D9C
CFE456E1EFDCF65153E3E592E3E7FE95654A0E339BFCC2EFC9216CDE3F4F5947
FE86262F79CEE74C37921814ADCFF503DF28E5C501DEE456BDB1ACCC4455ED38
6E4712955D4A5CF40EEF9BE10DBB06CE4A8445A3F1A478BE671DCABD0881071C
CF876724951CFDA2F81247D8DF5B09C4F412F782> |
!
end
end end
%ADOEndSubsetFont
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
749.705 26.262 mo
(\007=\007?\007?\007A\007O\007O)
[10.0621 8.28015 8.28015 8.92798 8.22607 0 ]xsh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
%ADOBeginSubsetFont: MZQYNE+Cambria#20Math-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MZQYNE+Cambria#20Math 1 GetGlyphDirectory
1877 <001C60D8A8C9B7EB08620DE1BA1334BAD0AAE06F1D092A42F1123B2BD1
D0B0B284AB1493982A42B8315248F987328F62D3E77561F626C59F69C6D4DF3C
5C90863152145938F9708415339AC9F1E32031F92E20DD1DB92820BB8DD5918F
35FA2916422178605937B224FB33C5E645404BBF39FA4EB86BFCB675E2D4B9E3
2938F7510ED8BE0C19319B6466515998D55A3F2563C9A39ED972CAB7BB3492B7
A421367F75A62C1113E45CD4AA744619DC5327FCE89D437531F758C88A0457E7
33E52007F7C3D6BB5BB7901C8FE2166540D93EA50745F6FB40FE48DF0AB7D9E1
B9D82FE288B8A14147ACF01F11A718E85D0B13E5> |
!
end
end end
%ADOEndSubsetFont
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
28.955 40.812 mo
(\007=\007N\007N\007=\007U)
[10.0621 8.56796 8.47787 9.95416 0 ]xsh
grestore
gsave
-147.875 521.072 mo
812.125 521.072 li
812.125 -18.928 li
-147.875 -18.928 li
cp
eclp
%ADOBeginSubsetFont: MZQYNE+Cambria#20Math-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/MZQYNE+Cambria#20Math 1 GetGlyphDirectory
1878 <001C60D8A8C9B758703049F187DE43F86EAE04F26EA9C5C36B6BF61336
4275BBE36299767516BFD690368AE355010E6EE3F42285DF9D005A0C3095FCE8
2835B68241DB1C037902ABDF8332564CF33C55C347F0775927B7E47E97FAF771
B84BF287BB692F6B8130EA414D58D7FF160AE0B1B21A81C4B522579181C42A83
51319CDB87> |
!
end
end end
%ADOEndSubsetFont
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
80.435 40.812 mo
(\007E\007J\007E\007P\007E\007=\007H\007E\007V\007A)
[5.70602 10.3321 5.77798 7.11008 5.70602 10.0802 5.6879 5.70602 8.74814 0 ]xsh
grestore
/MZQYNE+Cambria#20Math-Identity-H findfont [18 0 0 -18 0 0 ]msf
285.085 273.252 mo
(\007=\007N\007N\007=\007U)
[10.0621 8.56796 8.47787 9.95416 0 ]xsh
336.465 273.252 mo
(\007N\007A\007E\007J\007E\007P\007E\007=\007H\007E\007V\007A)
[8.56796 8.83795 5.70602 10.3321 5.77795 7.11011 5.70599 10.0803 5.68787 5.70605 8.74811 0 
]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/MZQYNE+Cambria#20Math-Identity-H uf
/MZQYNE+Cambria#20Math /CIDFont ur
/MZQYND+Consolas*1 uf
/MZQYND+Consolas uf
/PBAAAA+Consolas uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
